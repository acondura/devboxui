<?php

/**
 * @file
 * Contains \Drupal\devboxui\DevboxUiModule.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Field\FieldDefinitionInterface;

/**
 * Implements hook_form_alter().
 */
function devboxui_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_form') {
    foreach ($form as $field_name => $field) {
      if (preg_match('/^field_vps_/', $field_name)) {
        // Remove the "VPS" prefix from the field title.
        $field_title = $field['widget'][0]['value']['#title'];
        $field_title = explode(' ', $field_title);
        array_shift($field_title);
        $form[$field_name]['widget'][0]['value']['#title'] = implode(' ', $field_title);

        // Add a description to the field.
        $form[$field_name]['widget'][0]['value']['#description'] = devboxuiGetUserFieldDescription($field_name);
      }
    }
  }
}

/**
 * Get the description for a user field.
 */
function devboxuiGetUserFieldDescription($field_name) {
  return '';
}

/**
 * Set dynamic allowed values.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function devboxui_options_allowed_values(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $options = [];
  $entity_type = $entity->getEntityTypeId();
  $field_name = $definition->id();

  if ($entity_type == 'paragraph') {
    $bundle = $entity->bundle();
    $allowed_bundles = devboxui_get_providers_list();
    $allowed_fields = [
      'paragraph.field_location',
      'paragraph.field_server_type',
      'paragraph.field_os_image',
    ];

    if (in_array($bundle, $allowed_bundles)) {
      $options[] = 'Center';
    }
  }

  return $options;
}

function devboxui_get_providers_list() {
  // Get all field definitions for the user entity.
  $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions('user', 'user');
  $vps_fields = [];

  foreach ($field_definitions as $field_name => $definition) {
    if (str_starts_with($field_name, 'field_vps')) {
      $vps_fields[] = str_replace('field_vps_', '', $field_name);
    }
  }

  return $vps_fields;
}


/**
 * Helper function to call the VPS provider API.
 *
 * @param [type] $provider
 * @param [type] $method
 * @param array $params
 * @return void
 */
function vpsCall($provider, $path, $params = [], $method = 'GET') {
  $method = strtoupper($method);
  $token = getUserDevboxProviders('token')[$provider];
  if (empty($token)) return [];

  $client = \Drupal::httpClient();
  try {
    if ($method === 'GET') {
      $initial_path = $path;
      // Add query parameters to the path, if any.
      if (!empty($params)) {
        $query = http_build_query($params);
        $path .= '?' . $query;
      }

      // Check if the response is cached.
      if ($cache = \Drupal::cache('devboxui')->get($provider . ':' . $path)) {
        return devboxProcessResponse(
          $provider,
          $token,
          $initial_path,
          $cache->data
        );
      }
      else { // Get the response from the API.
        $response = $client->get(
          getDevboxProvidersList()[$provider]['api_url'] . '/' . $path, [
            'headers' => [
              'Authorization' => 'Bearer ' . $token,
            ],
          ]
        );
        $responseBody = json_decode($response->getBody(), TRUE);
        // Cache the response for 24 hours if it's not in cache.
        \Drupal::cache('devboxui')->set(
          $provider . ':' . $path,
          $responseBody,
          time() + 86400 // Cache for 24 hours.
        );
        // Process the response.
        return devboxProcessResponse(
          $provider,
          $token,
          $initial_path,
          $responseBody
        );
      }
    }
    else if ($method === 'POST') {
      $response = $client->post(getDevboxProvidersList()[$provider]['api_url'] . '/' . $path, [
        'headers' => [
          'Authorization' => 'Bearer ' . $token,
          'Content-Type' => 'application/json',
        ],
        'json' => $params,
      ]);
      return json_decode($response->getBody(), TRUE);
    }
    else if ($method === 'DELETE') {
      $response = $client->delete(getDevboxProvidersList()[$provider]['api_url'] . '/' . $path, [
        'headers' => [
          'Authorization' => 'Bearer ' . $token,
        ],
      ]);
      return json_decode($response->getBody(), TRUE);
    }
  } catch (\Exception $e) {
    \Drupal::logger('devboxui')->error('VPS API error: ' . $e->getMessage());
    return [
      'error' => TRUE,
      'message' => 'VPS API error: ' . $e->getMessage(),
    ];
  }
}
