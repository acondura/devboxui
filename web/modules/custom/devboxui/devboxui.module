<?php

/**
 * @file
 * Contains \Drupal\devboxui\DevboxUiModule.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Field\FieldDefinitionInterface;

/**
 * Implements hook_form_alter().
 */
function devboxui_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_form') {
    foreach ($form as $field_name => $field) {
      if (preg_match('/^field_vps_/', $field_name)) {
        // Remove the "VPS" prefix from the field title.
        $field_title = $field['widget'][0]['value']['#title'];
        $field_title = explode(' ', $field_title);
        array_shift($field_title);
        $form[$field_name]['widget'][0]['value']['#title'] = implode(' ', $field_title);

        // Add a description to the field.
        $form[$field_name]['widget'][0]['value']['#description'] = devboxuiGetUserFieldDescription($field_name);
      }
    }
  }
  /*
  if (in_array($form_id, ['node_devbox_form', 'node_devbox_edit_form'])) {
    $finished = FALSE;
    for ($i = 0; $finished == FALSE; $i++) {
      if (isset($form['field_vps_provider']['widget'][$i])) {
        if (isset($form['field_vps_provider']['widget'][$i]['subform']['field_os_image'])) {
          $keys = array_keys($form['field_vps_provider']['widget'][$i]['subform']['field_os_image']['widget']['#options']);
          $default = end($keys);
          $form['field_vps_provider']['widget'][$i]['subform']['field_os_image']['widget']['#default_value'] = $default;
        }
      }
      else {
        $finished = TRUE;
      }
    }
  }
  */
}

/**
 * Get the description for a user field.
 */
function devboxuiGetUserFieldDescription($field_name) {
  return '';
}

/**
 * Set dynamic allowed values.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function devboxui_options_allowed_values(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $options = [];
  $entity_type = $entity->getEntityTypeId();

  if ($entity_type == 'paragraph') {
    $bundle = $entity->bundle();
    $field_id = $definition->id();
    $allowed_bundles = devboxui_get_providers_list();
    $allowed_fields = [
      'paragraph.field_server_type',
      'paragraph.field_os_image',
    ];

    if (in_array($bundle, $allowed_bundles) && in_array($field_id, $allowed_fields)) {
      $vps_manager = \Drupal::service('plugin.manager.vps_provider');
      $method = explode('field_', $field_id)[1];
      $vps_plugin = $vps_manager->createInstance($bundle);
      $options = $vps_plugin->$method();

      return $options;
    }
  }

  return $options;
}

function devboxui_get_providers_list() {
  // Get all field definitions for the user entity.
  $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions('user', 'user');
  $vps_fields = [];

  foreach ($field_definitions as $field_name => $definition) {
    if (str_starts_with($field_name, 'field_vps_')) {
      $vps_fields[] = str_replace('field_vps_', '', $field_name);
    }
  }

  return $vps_fields;
}


/**
 * Helper function to call the VPS provider API.
 *
 * @param [type] $provider
 * @param [type] $method
 * @param array $params
 * @return void
 */
function vpsCall($provider, $path, $params = [], $method = 'GET') {
  $method = strtoupper($method);
  $token = getUserProviderToken($provider);
  $api_url = \Drupal::service('plugin.manager.vps_provider')->createInstance($provider)->info()['api_url'];
  if (empty($token)) return [];

  $client = \Drupal::httpClient();
  try {
    if ($method === 'GET') {
      // Add query parameters to the path, if any.
      if (!empty($params)) {
        $query = http_build_query($params);
        $path .= '?' . $query;
      }

      // Check if the response is cached.
      if ($cache = \Drupal::cache('devboxui')->get($provider . ':' . $path)) {
        return $cache->data;
      }
      else { // Get the response from the API.
        $response = $client->get(
          $api_url . '/' . $path, [
            'headers' => [
              'Authorization' => 'Bearer ' . $token,
            ],
          ]
        );
        $responseBody = json_decode($response->getBody(), TRUE);
        $cache_time = 300;
        // Cache the response if not in cache.
        \Drupal::cache('devboxui')->set(
          $provider . ':' . $path,
          $responseBody,
          time() + $cache_time
        );
        // Return the response.
        return $responseBody;
      }
    }
    else if ($method === 'POST') {
      $response = $client->post($api_url . '/' . $path, [
        'headers' => [
          'Authorization' => 'Bearer ' . $token,
          'Content-Type' => 'application/json',
        ],
        'json' => $params,
      ]);
      return json_decode($response->getBody(), TRUE);
    }
    else if ($method === 'DELETE') {
      $response = $client->delete($api_url . '/' . $path, [
        'headers' => [
          'Authorization' => 'Bearer ' . $token,
        ],
      ]);
      return json_decode($response->getBody(), TRUE);
    }
  } catch (\Exception $e) {
    \Drupal::logger('devboxui')->error('VPS API error: ' . $e->getMessage());
    return [
      'error' => TRUE,
      'message' => 'VPS API error: ' . $e->getMessage(),
    ];
  }
}

function getUserProviderToken($provider) {
  // load current user
  $user = entityManage('user', \Drupal::currentUser()->id());
  $token = $user->get('field_vps_'.$provider)->getString();
  return $token;
}

/*
 * Entity Manager - a wrapper for entity CRUD & listing operations.
 * If $values is empty, it returns the request entity if found, else false.
 */
function entityManage($entity_type, $entityIdArray = [], $values = []) {
	$entityStorage = \Drupal::entityTypeManager()->getStorage($entity_type);

  # Load all entities if no Id and no values were supplied
  if(empty($entityIdArray) && empty($values))
    return $entityStorage->loadMultiple();

  # Try loading the supplied entity
  if(is_array($entityIdArray)) # Find entity using an array of properties (e.g. vid and term name)
    $entity = $entityStorage->loadByProperties($entityIdArray);
  else # Find entity using a non-array property (e.g. Id)
    $entity = $entityStorage->load($entityIdArray);

  # Entity exists
  if(!empty($entity)) {
    # Return entity if Id or properties were supplied but no values to be set
    if(!empty($entityIdArray) && empty($values)) {
      # If only 1 result is returned, use the entity object (not array, in case array with object is returned)
      if(is_array($entity) && count($entity) == 1) $entity = $entity[key($entity)];
			# Else, return all
      return $entity;
    }

    # If requested, delete the selected entities
    if(!empty($values) && $values == 'del') {
      if(is_array($entity)) {
        foreach($entity as $e) {
          $e->delete();
        }
      } else {
        $entity->delete();
      }
      return;
    }

    # Use the entity object (not array, in case array with object is returned)
    if(is_array($entity)) $entity = $entity[key($entity)];

    # Update the entity
    foreach($values as $k => $v) $entity->set($k, $v);
    $entity->save();
  }
  else { // Initial entity does not exist
    if(!empty($values)) { # Continue if values were supplied
      if($values == 'del') return false;

      // Check for previously created entity. Fixes duplication if this is run
      // more than once when an entity property gets changed (e.g. term name change).
      if(is_array($entityIdArray)) { // Array with properties
        $ak = array_keys($entityIdArray); $newEntityIdArray = []; // Get array keys, start new array

        if(is_array($values)) { // Use the supplied values for entity search
          foreach ($ak as $k) $newEntityIdArray = array_merge($newEntityIdArray, [$k => $values[$k]]);
        }

        // Find entity using an array of properties (e.g. vid and term name)
        $entity = $entityStorage->loadByProperties($newEntityIdArray);
      }
      else // Find entity using a non-array property (e.g. Id)
        $entity = $entityStorage->load($entityIdArray);

      if(empty($entity)) { // Entity was not previously created
        // Create entity with supplied values
        $entity = $entityStorage->create($values);
        // Save the entity
        $entity->save();
      }

      // Use the entity object (in case array with object is returned)
      if(is_array($entity)) $entity = $entity[key($entity)];
    }
  }

  // Return the object of the found/created/updated entity
  return !empty($entity) ? $entity : false;
}
